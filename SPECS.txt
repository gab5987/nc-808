==============================
=       NC 808 - SPECS       =
==============================

=== OVERVIEW  ===
* Minicomputer designed to be implemented with TTL
* 8-bit data width
* Device communication via dedicated I/O instructions


=== INSTRUCTIONS ===
0: NOP  -               -> nop                     (no operation)
1: LD   [imm4], [imm4]  -> [reg/imm4] = [reg/imm4] (load value into a register)
2: ADDˆ -,              -> acc = acc + rb          (addition)
3: SUBˆ -,              -> acc = acc - rb          (subtraction)
4: STA  [imm4], [imm8]  -> [mem/imm8] = [reg/imm4] (store into memory, HL)
5: LDI  [imm8], [imm4]  -> [reg/imm4] = [imm8]     (load immediate, into some register)
6: JMP  [imm8]          -> PC = imm8               (jump, unconditional)
7:
8:
9:
A:
B:
C:
D: INP  [imm4], [imm4]  -> [reg/imm4] = [IO/imm4]  (input, read from I/O)
E: OUT  [imm4], [imm4]  -> [IO/imm4] = [reg/imm4]  (output, outputs to I/O)
F: HLT  -               -> halt                    (halt, stop execution)

^ these instructions load the (F)lags register


+++ INSTRUCTIONS EXPLANATION +++

0: NOP  -> Basically does nothing but increment the Program Counter.
1: LD   -> Copies a value stored in a register to another register.
2: ADDˆ -> Takes the value of ACC, sums it with RB and then store the result into ACC.
3: SUBˆ -> Takes the value of ACC, substract it with RB and then store the result into ACC.
4: STA  -> Takes the value of a register and store into a specific location in memory.
5: LDI  -> Loads an immediate into a register.
6: JMP  -> Jump to a specific location in memory.
7: 
8: 
9: 
A: 
B: 
C: 
D: INP  -> Reads from I/O and stores into a register.
E: OUT  -> Outputs a value from a register into I/O.
F: HLT  -> Halts the clock.




=== REGISTERS ===
A (0): GP register  >> ACCUMULATOR
B (1): GP register
C (2): GP register
F (7): flags (LSB to MSB)
    ZERO
    CARRY



=== MEMORY LAYOUT ===
// TODO: add memory layout

=== MEMORY BANKING ===
// Seriously considering adding memory banking to reduce the amount of logic and circuits required to implement the CPU

=== PORTS ===
PORTS are used to communicate with devices or by the CPU itself.

0x00: CLOCK (? perhaps a good idea to add this to comunicate with peripherals)
0x01: STATUS
    0x00: CPU status
        0x00: CPU is halted
        0x01: CPU is running
    0x01: CPU mode
        0x00: 8-bit mode (default)
        0x01: 16-bit mode (? not entirely sure if this is necessary)
0x02: INTERRUPT (? perhaps a good idea to add this to comunicate with peripherals)

